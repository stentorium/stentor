{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.15.1",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "stentor-utils!",
  "docComment": "",
  "name": "stentor-utils",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "stentor-utils!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!addDurations:function(1)",
          "docComment": "/**\n * Add durations together, combining to the provided format.\n *\n * @param durations - \n *\n * @param format - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addDurations(durations: "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "stentor-models!Duration:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", format: "
            },
            {
              "kind": "Reference",
              "text": "DurationFormat",
              "canonicalReference": "stentor-models!DurationFormat:type"
            },
            {
              "kind": "Content",
              "text": ", round?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "stentor-models!Duration:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "durations",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "round",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "addDurations"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!baseUrl:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function baseUrl(s: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "baseUrl"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!capitalize:function(1)",
          "docComment": "/**\n * Capitalizes the word\n *\n * It turns \"zero\" to \"Zero\"\n *\n * @param s - \n *\n * @returns \n *\n * @see\n *\n * https://stackoverflow.com/a/33704783/1349766\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function capitalize(s: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "capitalize"
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!CATCH_ALL_REGEX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "CATCH_ALL_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "CATCH_ALL_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!cleanInvalid:function(1)",
          "docComment": "/**\n * Removes any invalid characters for SSML\n *\n * <p> Note: This will need to be beefed up in the future. </p>\n *\n * {@link https://github.com/mandnyc/ssml-builder/blob/master/index.js#L257}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cleanInvalid(outputSpeech: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "outputSpeech",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "cleanInvalid"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!cleanTags:function(1)",
          "docComment": "/**\n * Clean HTML and XML tags from a string\n *\n * @param str - \n *\n * @returns {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cleanTags(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "cleanTags"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!combineRequestSlots:function(1)",
          "docComment": "/**\n * Combines two slot maps.\n *\n * @remarks\n *\n * The incoming will only override the current if the value doesn't exist on the current and exists on the incoming. This is helpful for slot filling.\n *\n * If both are undefined, an empty object is returned.\n *\n * @param current - The current slots\n *\n * @param incoming - The new incoming slots\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function combineRequestSlots(current: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotMap",
              "canonicalReference": "stentor-models!RequestSlotMap:interface"
            },
            {
              "kind": "Content",
              "text": ", incoming: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotMap",
              "canonicalReference": "stentor-models!RequestSlotMap:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotMap",
              "canonicalReference": "stentor-models!RequestSlotMap:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "current",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "incoming",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "combineRequestSlots"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "stentor-utils!Comparable:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Comparable = "
            },
            {
              "kind": "Content",
              "text": "boolean | string | number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Comparable",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!compare:function(1)",
          "docComment": "/**\n * Compare the first value to the second using the provided operator.\n *\n * If no operator is provided it defaults to \"===\"\n *\n * @param value1 - \n *\n * @param value2 - \n *\n * @param operator - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compare(value1: "
            },
            {
              "kind": "Reference",
              "text": "Comparable",
              "canonicalReference": "stentor-utils!Comparable:type"
            },
            {
              "kind": "Content",
              "text": ", value2: "
            },
            {
              "kind": "Reference",
              "text": "Comparable",
              "canonicalReference": "stentor-utils!Comparable:type"
            },
            {
              "kind": "Content",
              "text": ", operator?: "
            },
            {
              "kind": "Reference",
              "text": "MatchOperation",
              "canonicalReference": "stentor-models!MatchOperation:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value1",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "value2",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "operator",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "compare"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!compileJSONPaths:function(1)",
          "docComment": "/**\n * Compiles all instances of a template with the provided string by looking up the JSON path within the provided object.\n *\n * For example, when passed \"${greeting} ${foo.name}, how are you?\" and { greeting: \"Hello\", foo: {name: \"Bob\" }} will be compiled to \"Hello Bob, how are you?\"\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileJSONPaths(responseOutput: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", object: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", replaceWhenUndefined?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "responseOutput",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "replaceWhenUndefined",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "compileJSONPaths"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!compileJSONPaths:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileJSONPaths(responseOutput: "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": ", object: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", replaceWhenUndefined?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "responseOutput",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "replaceWhenUndefined",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "compileJSONPaths"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!compileSlotValues:function(1)",
          "docComment": "/**\n * Compiles a templated response with slot values from the provided slot map.\n *\n * For example, when passed \"What date do you want your ${flowers}?\" and the slot map contains a slot with name `flowers` it will replace it with the value.\n *\n * It will handle the different potential value types for slots such as strings, numbers, dates and durations.\n *\n * @param responseOutput - \n *\n * @param slots - \n *\n * @param replaceWhenUndefined - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileSlotValues(responseOutput: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", slots: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotMap",
              "canonicalReference": "stentor-models!RequestSlotMap:interface"
            },
            {
              "kind": "Content",
              "text": ", replaceWhenUndefined?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "responseOutput",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "slots",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "replaceWhenUndefined",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "compileSlotValues"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!compileSlotValues:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function compileSlotValues(responseOutput: "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": ", slots: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotMap",
              "canonicalReference": "stentor-models!RequestSlotMap:interface"
            },
            {
              "kind": "Content",
              "text": ", replaceWhenUndefined?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "responseOutput",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "slots",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "replaceWhenUndefined",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "compileSlotValues"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!concatSSML:function(1)",
          "docComment": "/**\n * Concat SSML in a smart way for TTS or display.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function concatSSML(one: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", two: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", delimiter?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "one",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "two",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "delimiter",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "concatSSML"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!concatText:function(1)",
          "docComment": "/**\n * Combine two strings in a smart way for TTS or display.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function concatText(one: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", two: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", delimiter?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "one",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "two",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "delimiter",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "concatText"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!containsInvalidResponse:function(1)",
          "docComment": "/**\n * Checks to see if any of the responses within the handler has invalid XML within the SSML fields.\n *\n * @param intent - \n *\n * @returns {ContainsInvalidResponseResult}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function containsInvalidResponse(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ContainsInvalidResponseResult",
              "canonicalReference": "stentor-utils!ContainsInvalidResponseResult:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "containsInvalidResponse"
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!ContainsInvalidResponseResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ContainsInvalidResponseResult "
            }
          ],
          "releaseTag": "Public",
          "name": "ContainsInvalidResponseResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!ContainsInvalidResponseResult#error:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "error: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "error",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!ContainsInvalidResponseResult#response:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "response",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!containsNumbers:function(1)",
          "docComment": "/**\n * Does the provided string contain numbers.\n *\n * @param word - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function containsNumbers(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "containsNumbers"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!containsUppercase:function(1)",
          "docComment": "/**\n * Does the provided string contain uppercase letters.\n *\n * @param word - Word to check\n *\n * @returns True if the word contains uppercase letters, false if not\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function containsUppercase(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "containsUppercase"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!dateTimeRangeToSpeech:function(1)",
          "docComment": "/**\n * Converts a date time range to speech to be added to a response.\n *\n * In the case where the date is the same for the start and the end, the date will only be mentioned once. For example \"on July 4th 2019 from 1:00 PM to 2:00PM\"\n *\n * @param value - DateTimeRange slot value\n *\n * @param type - Optional type, defaults to \"ssml\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dateTimeRangeToSpeech(value: "
            },
            {
              "kind": "Reference",
              "text": "DateTimeRange",
              "canonicalReference": "stentor-models!DateTimeRange:interface"
            },
            {
              "kind": "Content",
              "text": ", type?: "
            },
            {
              "kind": "Content",
              "text": "\"ssml\" | \"displayText\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "dateTimeRangeToSpeech"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!dateTimeToSpeech:function(1)",
          "docComment": "/**\n * Converts a date time object to a string that can be used in either SSML or display text.\n *\n * @param value - \n *\n * @param type - \n *\n * @beta\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dateTimeToSpeech(value: "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": ", type?: "
            },
            {
              "kind": "Content",
              "text": "\"ssml\" | \"displayText\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Beta",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "dateTimeToSpeech"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!dateTimeToString:function(1)",
          "docComment": "/**\n * Converts a date time object to a string.\n *\n * Either a single date (2020-07-19T23:59:59) or a range (2019-07-19T00:00:00 --> 2020-07-19T23:59:59).\n *\n * @param dateTime - Either DateTime or DateTimeRange to convert to a string\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dateTimeToString(dateTime: "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DateTimeRange",
              "canonicalReference": "stentor-models!DateTimeRange:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dateTime",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "dateTimeToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!dedupe:function(1)",
          "docComment": "/**\n * Removes any duplicates from an array.\n *\n * This is a wrapper around lodash.uniq.\n *\n * @param input - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dedupe<T>(input: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "dedupe"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!describeKey:function(1)",
          "docComment": "/**\n * Describes the key in terms of what type of IDs it accepts.\n *\n * @param key - \n *\n * @returns {KeyDescription}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function describeKey(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "KeyDescription",
              "canonicalReference": "stentor-utils!KeyDescription:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "describeKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!dessmlify:function(1)",
          "docComment": "/**\n * Removes tags <speak> & </speak> from SSML\n *\n * @param str - String to remove <speak> tags.\n *\n * @returns String without <speak> tags.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dessmlify(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "dessmlify"
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!DETECTION_CATCH_ALL_WITH_EXCLUSION_REGEX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DETECTION_CATCH_ALL_WITH_EXCLUSION_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DETECTION_CATCH_ALL_WITH_EXCLUSION_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!DETECTION_CATCH_ALL:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DETECTION_CATCH_ALL: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DETECTION_CATCH_ALL",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!DETECTION_ID_ONLY_REGEX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DETECTION_ID_ONLY_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DETECTION_ID_ONLY_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!DETECTION_INCLUDE_ONLY_REGEX:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DETECTION_INCLUDE_ONLY_REGEX: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "DETECTION_INCLUDE_ONLY_REGEX",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!determineIntentIdToPath:function(1)",
          "docComment": "/**\n * For the given handler, find the intentId that will lead to the provided path.\n *\n * @param handler - \n *\n * @param pathId - \n *\n * @returns {(string | undefined)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function determineIntentIdToPath(handler: "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": ", pathId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "handler",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "pathId",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "determineIntentIdToPath"
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!DURATION_FORMAT_TO_MS_MULTIPLIER:var",
          "docComment": "/**\n * Lookup table to convert a duration format to a multiplier that will convert it to milliseconds\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DURATION_FORMAT_TO_MS_MULTIPLIER: "
            },
            {
              "kind": "Reference",
              "text": "DurationFormatToMSMultiplier",
              "canonicalReference": "stentor-utils!DurationFormatToMSMultiplier:type"
            }
          ],
          "releaseTag": "Public",
          "name": "DURATION_FORMAT_TO_MS_MULTIPLIER",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!durationFormatGreaterThan:function(1)",
          "docComment": "/**\n * Compare two duration formats {@link stentor-models#DurationFormat} is greater than the other.\n *\n * For example, a year is greater than a month.\n *\n * @param one - \n *\n * @param two - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function durationFormatGreaterThan(one: "
            },
            {
              "kind": "Reference",
              "text": "DurationFormat",
              "canonicalReference": "stentor-models!DurationFormat:type"
            },
            {
              "kind": "Content",
              "text": ", two: "
            },
            {
              "kind": "Reference",
              "text": "DurationFormat",
              "canonicalReference": "stentor-models!DurationFormat:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "one",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "two",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "durationFormatGreaterThan"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "stentor-utils!DurationFormatToMSMultiplier:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DurationFormatToMSMultiplier = "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DurationFormat",
              "canonicalReference": "stentor-models!DurationFormat:type"
            },
            {
              "kind": "Content",
              "text": ", number>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DurationFormatToMSMultiplier",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!durationToSpeech:function(1)",
          "docComment": "/**\n * Converts a duration to speech with appropriate pluralization.\n *\n * @param duration - \n *\n * @param type - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function durationToSpeech(duration: "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "stentor-models!Duration:interface"
            },
            {
              "kind": "Content",
              "text": ", type?: "
            },
            {
              "kind": "Content",
              "text": "\"ssml\" | \"displayText\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "duration",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "durationToSpeech"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!estimateSize:function(1)",
          "docComment": "/**\n * Estimate the size of the object for DynamoDB\n *\n * @param json - \n *\n * @see\n *\n * http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/CapacityUnitCalculations.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function estimateSize(json: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "json",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "estimateSize"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!existsAndNotEmpty:function(1)",
          "docComment": "/**\n * Quick function to see if the array exists and has a length greater than 0.\n *\n * You would use this instead of writing `myArray && myArray.length > 0`, which increases your cyclomatic complexity.\n *\n * @param items - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function existsAndNotEmpty<T>(items: "
            },
            {
              "kind": "Content",
              "text": "T[] | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "existsAndNotEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!fetchUrl:function(1)",
          "docComment": "/**\n * Fetch content from url (network or file)\n *\n * @param url - \n *\n * @returns {Promise<T>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fetchUrl(url: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "url",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "fetchUrl"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!filterOutIntents:function(1)",
          "docComment": "/**\n * Filters out the intents from an array of intents and handlers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function filterOutIntents(handlersAndIntents: "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": ")[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "handlersAndIntents",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "name": "filterOutIntents"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!findValueForKey:function(1)",
          "docComment": "/**\n * Searches the provided object for the provided key.\n *\n * Smarter than a normal obj[key] as key can also be a regex.\n *\n * In the cases where a regex is broad (\".*\") but there is also an exact match, the exact match is preferred.\n *\n * @param key - \n *\n * @param obj - \n *\n * @returns {(V | undefined)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findValueForKey<V>(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", obj: "
            },
            {
              "kind": "Reference",
              "text": "ObjectWithKeys",
              "canonicalReference": "stentor-utils!ObjectWithKeys:interface"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "V | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findValueForKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!findValuesForKey:function(1)",
          "docComment": "/**\n * Finds all values that match for the provided key.\n *\n * Smarter than a normal obj[key] as key can also be a regex.\n *\n * @param key - \n *\n * @param obj - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function findValuesForKey<V>(key: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", obj: "
            },
            {
              "kind": "Reference",
              "text": "ObjectWithKeys",
              "canonicalReference": "stentor-utils!ObjectWithKeys:interface"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "V[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "findValuesForKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!formatNumberForDisplay:function(1)",
          "docComment": "/**\n * Format numbers for display. This is a thin wrapper around http://numeraljs.com/\n *\n * Default format is \"0,0\" which turns 1000 to 1,000. More formats can be found {@link http://numeraljs.com/#format}\n *\n * @param number - Number to be formatted for display.\n *\n * @param format - Defaults to \"0,0\"\n *\n * @returns Number in string form, properly formatted for display\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function formatNumberForDisplay(number: "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": ", format?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "number",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "formatNumberForDisplay"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!forwardsTo:function(1)",
          "docComment": "/**\n * Does the provided intent or handler forward to the provided ID.\n *\n * @param intent - \n *\n * @param intentId - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function forwardsTo(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": ", intentId: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "intentId",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "forwardsTo"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!generateIntentId:function(1)",
          "docComment": "/**\n * Generates an ID for an Intent.\n *\n * It follows our Intent ID convention that does not have spaces and ends with `Intent`.\n *\n * @param name - \n *\n * @returns {string | undefined}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateIntentId(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "generateIntentId"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!generateKey:function(1)",
          "docComment": "/**\n * Generate a key from the provided key description.\n *\n * @param description - \n *\n * @returns {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generateKey(description: "
            },
            {
              "kind": "Reference",
              "text": "KeyDescription",
              "canonicalReference": "stentor-utils!KeyDescription:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "description",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "generateKey"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!getDateTimeFrom:function(1)",
          "docComment": "/**\n * From a Dialogflow style ISO-8601 time string: \"2019-06-05T12:00:00-04:00\", it pulls out the date and the time.\n *\n * @param date - \n *\n * @param includeOnly - \n *\n * @returns A DateTime object based on the provided parameters\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDateTimeFrom(date: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": ", includeOnly?: "
            },
            {
              "kind": "Content",
              "text": "\"time\" | \"date\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "includeOnly",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "getDateTimeFrom"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!getDateTimeRangeFrom:function(1)",
          "docComment": "/**\n * Parses the string and returns a DateTimeRange object.\n *\n * Supports both the ISO-8601 range & \"-->\" style date range.\n *\n * @param date - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDateTimeRangeFrom(date: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DateTimeRange",
              "canonicalReference": "stentor-models!DateTimeRange:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getDateTimeRangeFrom"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!getDurationFrom:function(1)",
          "docComment": "/**\n * Parses the string, if in the ISO-8601 duration format, and returns a {@link stentor-models#Duration} object. If the provided string is not a duration string, it returns undefined.\n *\n * {@link https://stackoverflow.com/a/29153059/1349766}\n *\n * @param iso8601Duration - \n *\n * @param groupBy - If there are multiple duration formats specified, you can combine them by either the largest or smallest, defaults to largest.\n *\n * @returns A duration object or undefined if the string is not of expected format.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDurationFrom(iso8601Duration: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", groupBy?: "
            },
            {
              "kind": "Reference",
              "text": "GetDurationGroupBy",
              "canonicalReference": "stentor-utils!GetDurationGroupBy:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "stentor-models!Duration:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "iso8601Duration",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "groupBy",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getDurationFrom"
        },
        {
          "kind": "Enum",
          "canonicalReference": "stentor-utils!GetDurationGroupBy:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum GetDurationGroupBy "
            }
          ],
          "releaseTag": "Public",
          "name": "GetDurationGroupBy",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!GetDurationGroupBy.Largest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Largest = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Largest",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!GetDurationGroupBy.Smallest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Smallest = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Smallest",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "stentor-utils!HandledIn:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum HandledIn "
            }
          ],
          "releaseTag": "Public",
          "name": "HandledIn",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!HandledIn.Any:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Any = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Any",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!HandledIn.Content:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Content = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Content",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!HandledIn.Forward:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Forward = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Forward",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!HandledIn.Redirect:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Redirect = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Redirect",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!HandlerMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HandlerMap "
            }
          ],
          "releaseTag": "Public",
          "name": "HandlerMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "stentor-utils!HandlerMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[intentId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "stentor-models!Handler:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "intentId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!handles:function(1)",
          "docComment": "/**\n * Does the provided Intent / Handler handle the provided ID in some way or another.\n *\n * This checks redirect, content, & forward for the ID as a key.\n *\n * Optionally, you can specify if you only want to check either redirect, content, or forward. The default is to check all three.\n *\n * @param intent - \n *\n * @param id - \n *\n * @param how - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function handles(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": ", id: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", how?: "
            },
            {
              "kind": "Reference",
              "text": "HandledIn",
              "canonicalReference": "stentor-utils!HandledIn:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "how",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "handles"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hasContent:function(1)",
          "docComment": "/**\n * Does the provided intent or handler have content.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasContent(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "hasContent"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hasForwards:function(1)",
          "docComment": "/**\n * Does the provided intent or handler have any forward paths setup.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasForwards(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "hasForwards"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hashCode:function(1)",
          "docComment": "/**\n * Simple function to convert a string to a simple numeric hash.\n *\n * This has potential collisions, do not use as a unique key when the population is large.\n *\n * @param str - \n *\n * @returns {number}\n *\n * @see\n *\n * https://stackoverflow.com/a/7616484/1349766\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hashCode(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "hashCode"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hasMarkup:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasMarkup(speech: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "speech",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "hasMarkup"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hasReprompt:function(1)",
          "docComment": "/**\n * Does the provided intent or handler have any reprompts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasReprompt(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "hasReprompt"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!hasUtterances:function(1)",
          "docComment": "/**\n * Does the provided intent or handler have utterances.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasUtterances(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "hasUtterances"
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!IntentMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IntentMap "
            }
          ],
          "releaseTag": "Public",
          "name": "IntentMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "stentor-utils!IntentMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[intentId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Intent",
                  "canonicalReference": "stentor-models!Intent:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Handler",
                  "canonicalReference": "stentor-models!Handler:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "intentId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isComparable:function(1)",
          "docComment": "/**\n * Is the value comparable with the compare function.\n *\n * @param potential - \n *\n * @returns {potential is Comparable}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isComparable(potential: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "potential",
              "canonicalReference": "stentor-utils!~potential"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Comparable",
              "canonicalReference": "stentor-utils!Comparable:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isComparable"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isDateTime:function(1)",
          "docComment": "/**\n * Determine if the request slot value is a DateTime\n *\n * @param slotValue - Slot value to check\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDateTime(slotValue: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotValues",
              "canonicalReference": "stentor-models!RequestSlotValues:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "slotValue",
              "canonicalReference": "stentor-utils!~slotValue"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDateTime"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isDateTimeRange:function(1)",
          "docComment": "/**\n * Determine if the request slot value is a DateTimeRange\n *\n * @param slotValue - Slot value to check\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDateTimeRange(slotValue: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotValues",
              "canonicalReference": "stentor-models!RequestSlotValues:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "slotValue",
              "canonicalReference": "stentor-utils!~slotValue"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "DateTimeRange",
              "canonicalReference": "stentor-models!DateTimeRange:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDateTimeRange"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isDateTimeRangeString:function(1)",
          "docComment": "/**\n * Is the string in the date time range format with two ISO-8601 strings separated by \"-->\"\n *\n * @param potential - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDateTimeRangeString(potential: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDateTimeRangeString"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isDefiniteArticle:function(1)",
          "docComment": "/**\n * Is the word the definite article \"the\"\n *\n * @param word - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDefiniteArticle(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDefiniteArticle"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isDuration:function(1)",
          "docComment": "/**\n * Determine if the request slot value is a Duration\n *\n * @param slotValue - Slot value to check\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDuration(slotValue: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotValues",
              "canonicalReference": "stentor-models!RequestSlotValues:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "slotValue",
              "canonicalReference": "stentor-utils!~slotValue"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "stentor-models!Duration:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slotValue",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDuration"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isIndefiniteArticle:function(1)",
          "docComment": "/**\n * Is the word the indefinite article \"a\" or \"an\"\n *\n * @param word - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isIndefiniteArticle(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isIndefiniteArticle"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isISO8601:function(1)",
          "docComment": "/**\n * Determines if the string is an ISO-8601 style string.\n *\n * @remarks\n *\n * This does not cover the entire 8601 spec, just a version that is commonly used by NLUs to communicate date & time. For example, durations (like P1Y2M10D) are not supported.\n *\n * @param potential - Potential ISO-8601 string\n *\n * @returns - True if the string is ISO-8601 Date & Time string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isISO8601(potential: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isISO8601"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isISO8601Duration:function(1)",
          "docComment": "/**\n * Determine if the string is a proper ISO-8601 duration format.\n *\n * {@link https://stackoverflow.com/questions/32044846/regex-for-iso-8601-durations} {@link https://en.wikipedia.org/wiki/ISO_8601#Durations}\n *\n * @param potential - Potential ISO-8601 duration string to test\n *\n * @returns - True if the provided string is a ISO-8601 duration formatted string.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isISO8601Duration(potential: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isISO8601Duration"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isISO8601Range:function(1)",
          "docComment": "/**\n * Determines if the string is an ISO-8601 range style string.\n *\n * This does not cover the entire 8601 spec, just a version that is commonly used by NLUs to communicate date & time.\n *\n * {@link isISO8601} {@link https://en.wikipedia.org/wiki/ISO_8601#Time_intervals}\n *\n * @param potential - \n *\n * @returns True if the string confirms to ISO-8601 range format\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isISO8601Range(potential: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potential",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isISO8601Range"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isLambdaError:function(1)",
          "docComment": "/**\n * Is the Error a LambdaError, which has a statusCode.\n *\n * @param error - \n *\n * @returns {error is LambdaError}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLambdaError(error: "
            },
            {
              "kind": "Reference",
              "text": "LambdaError",
              "canonicalReference": "stentor-utils!LambdaError:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "error",
              "canonicalReference": "stentor-utils!~error"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LambdaError",
              "canonicalReference": "stentor-utils!LambdaError:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "error",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "isLambdaError"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isNumeric:function(1)",
          "docComment": "/**\n * Check to see if the provided parameter is a number.\n *\n * \"2\" or 2 will return true.\n *\n * Source {@link https://stackoverflow.com/a/42356340/1349766}\n *\n * @param num - The value to check if it is numeric\n *\n * @returns True if the value is numeric.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNumeric(num: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isNumeric"
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!ISO_8601_DATE_ONLY:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ISO_8601_DATE_ONLY: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ISO_8601_DATE_ONLY",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!ISO_8601_DURATION:var",
          "docComment": "/**\n * Regex to detect ISO-8601 duration strings\n *\n * {@link https://stackoverflow.com/a/32045167}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ISO_8601_DURATION: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ISO_8601_DURATION",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!ISO_8601_RANGE:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ISO_8601_RANGE: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ISO_8601_RANGE",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!ISO_8601_TIME_ONLY:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ISO_8601_TIME_ONLY: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ISO_8601_TIME_ONLY",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!ISO_8601:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ISO_8601: "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "ISO_8601",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isPreposition:function(1)",
          "docComment": "/**\n * Is the word an english preposition.\n *\n * NOTE: The list it checks against is not exhaustive.\n *\n * @param word - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPreposition(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isPreposition"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isUrl:function(1)",
          "docComment": "/**\n * Simple check to see if the string is potentially a URL.\n *\n * Only looks for a prefix of https://, http:// & file://\n *\n * @param s - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isUrl(s: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isUrl"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!isValidSSML:function(1)",
          "docComment": "/**\n * Checks to see if the SSML is valid.\n *\n * @param response - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isValidSSML(response: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "response",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isValidSSML"
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!KeyDescription:interface",
          "docComment": "/**\n * A description of a key for either Content, Forwards, or Redirects\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface KeyDescription "
            }
          ],
          "releaseTag": "Public",
          "name": "KeyDescription",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!KeyDescription#catchAll:member",
              "docComment": "/**\n * If true, the key will match for every string\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "catchAll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "catchAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!KeyDescription#excludedIntentIds:member",
              "docComment": "/**\n * If it exists, it is an array of possible strings that will be omitted in the case of a catch all key.\n *\n * Note, this must be used in conjunction with catchAll = true.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "excludedIntentIds?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "excludedIntentIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!KeyDescription#includedIntentIds:member",
              "docComment": "/**\n * If it exists, it is an array of possible strings that will match for the key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "includedIntentIds?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "includedIntentIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!KeyDescription#indescribable:member",
              "docComment": "/**\n * The key cannot be described with the current methods of description.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indescribable?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "indescribable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!KeyDescription#intentId:member",
              "docComment": "/**\n * If intentId exists, it is the only string that will match the key\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intentId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "intentId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "stentor-utils!LambdaError:class",
          "docComment": "/**\n * An Error that allows for a status code to be stored. By default the status code is 500.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LambdaError extends "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LambdaError",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "stentor-utils!LambdaError:constructor(1)",
              "docComment": "/**\n * Creates an instance of LambdaError.\n *\n * @param message - Error message to pass.\n *\n * @param statusCode - The status code linked to the error message. Default is 500.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(message: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "LambdaError",
                  "canonicalReference": "stentor-utils!LambdaError:class"
                },
                {
                  "kind": "Content",
                  "text": ", statusCode?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "statusCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "stentor-utils!LambdaError#statusCode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statusCode?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "statusCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "stentor-utils!ListDelimiter:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ListDelimiter "
            }
          ],
          "releaseTag": "Public",
          "name": "ListDelimiter",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!ListDelimiter.and:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "and = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "and",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!ListDelimiter.or:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "or = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "or",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!listisize:function(1)",
          "docComment": "/**\n * Builds a speakable and readable list from a set of items.\n *\n * For example, [\"one\", \"two\", \"three\", \"four\"] will be transformed to \"one, two, three or four\".\n *\n * @param items - \n *\n * @param delimiter - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function listisize(items: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", preferredDelimiter?: "
            },
            {
              "kind": "Reference",
              "text": "ListDelimiter",
              "canonicalReference": "stentor-utils!ListDelimiter:enum"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "preferredDelimiter",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "listisize"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!maskEmail:function(1)",
          "docComment": "/**\n * Partially masks a single email\n *\n * @param email - \n *\n * @returns {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maskEmail(email: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "email",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "maskEmail"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!maskEmails:function(1)",
          "docComment": "/**\n * Masks emails within a given string.\n *\n * @param s - \n *\n * @param partial - When true, some of the email remains\n *\n * @returns {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maskEmails(s: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", partial?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "partial",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "maskEmails"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!maskNumber:function(1)",
          "docComment": "/**\n * Takes a string with a phone number, sanitizes and masks it while leaving the last four digits legible.\n *\n * For example: 888-8888 -> XXX-8888 (704) 444 1234 -> XXX-XXX-1234\n *\n * @param phoneNumber - Number to be masked\n *\n * @returns The masked number, leaving the last four digits\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maskNumber(phoneNumber: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "phoneNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "maskNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!maskPhoneNumbers:function(1)",
          "docComment": "/**\n * Detects the phone numbers within a string and masks the numbers with #s, preserving the formatting.\n *\n * @param str - The string containing phone numbers.\n *\n * @param partial - Defaults to false. When true it keeps the last four digits of the number\n *\n * @returns String with phone numbers masked.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function maskPhoneNumbers(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", partial?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "partial",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "maskPhoneNumbers"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!matchRequestSlotToSlotTypeValue:function(1)",
          "docComment": "/**\n * Match the request slot to the provided slot type values.\n *\n * Both synonym and value are used, whichever has the highest score is returned.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function matchRequestSlotToSlotTypeValue<T>(slot: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlot",
              "canonicalReference": "stentor-models!RequestSlot:interface"
            },
            {
              "kind": "Content",
              "text": ", slotTypeValues: "
            },
            {
              "kind": "Reference",
              "text": "SlotTypeValue",
              "canonicalReference": "stentor-models!SlotTypeValue:interface"
            },
            {
              "kind": "Content",
              "text": "<T>[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SlotTypeValue",
              "canonicalReference": "stentor-models!SlotTypeValue:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "slot",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "slotTypeValues",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "matchRequestSlotToSlotTypeValue"
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!MatchResult:interface",
          "docComment": "/**\n * Results returned by the fuzzy string matcher.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MatchResult<T> extends "
            },
            {
              "kind": "Reference",
              "text": "Fuse.FuseResult",
              "canonicalReference": "fuse.js!~Fuse.FuseResult:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SlotTypeValue",
              "canonicalReference": "stentor-models!SlotTypeValue:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "MatchResult",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!matchUtteranceToSlotTypeValue:function(1)",
          "docComment": "/**\n * Matches the utterance to the slot type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function matchUtteranceToSlotTypeValue<T>(utterance: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ", slotTypeValues: "
            },
            {
              "kind": "Reference",
              "text": "SlotTypeValue",
              "canonicalReference": "stentor-models!SlotTypeValue:interface"
            },
            {
              "kind": "Content",
              "text": "<T>[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MatchResult",
              "canonicalReference": "stentor-utils!MatchResult:interface"
            },
            {
              "kind": "Content",
              "text": "<T>[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "utterance",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "slotTypeValues",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "matchUtteranceToSlotTypeValue"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!md5_2:function(1)",
          "docComment": "/**\n * Returns an md5 hash for the provided string.\n *\n * Leverages the blueimp-md5 package\n *\n * @param input - String to be hashed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function md5(input: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "md5_2"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!numberToWord:function(1)",
          "docComment": "/**\n * Converts number to their word (en) equivalent. For example, 1 is converted to one and 55 if converted to fifty-five\n *\n * @param num - Number to convert to it's word equivalent\n *\n * @returns The word representation of the number provided such as \"one\" or \"fifty-five\"\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function numberToWord(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "numberToWord"
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!ObjectWithKeys:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ObjectWithKeys<V> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ObjectWithKeys",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "stentor-utils!ObjectWithKeys:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "V"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!objHasAttrs:function(1)",
          "docComment": "/**\n * A utility function to determine if an object has attributes or not.\n *\n * @param obj - Object to check\n *\n * @returns True if the object exists and has attributes or false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function objHasAttrs(obj: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "objHasAttrs"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!parseDate:function(1)",
          "docComment": "/**\n * Parses the date within the string. Returns undefined if it cannot parse one.\n *\n * It does not handle date periods such as \"last week\" or \"last month\".\n *\n * Note: This is a wrapper around chrono-node parseDate. See https://github.com/wanasit/chrono for more information.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseDate(parsable: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", returnOnly?: "
            },
            {
              "kind": "Content",
              "text": "\"date\" | \"time\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "parsable",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "returnOnly",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "parseDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!parseRelativeDate:function(1)",
          "docComment": "/**\n * Parses the relative date string and returns a date time.\n *\n * Support is currently limited, see possible RelativeDateType & RelativeDateRangeType for current supported values.\n *\n * @param relative - The relative date\n *\n * @param now - Optional date to use to calculate date off of\n *\n * @returns - Computed relative data time\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseRelativeDate(relative: "
            },
            {
              "kind": "Reference",
              "text": "RelativeDateRangeType",
              "canonicalReference": "stentor-models!RelativeDateRangeType:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RelativeDateType",
              "canonicalReference": "stentor-models!RelativeDateType:type"
            },
            {
              "kind": "Content",
              "text": " | string"
            },
            {
              "kind": "Content",
              "text": ", now?: "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "DateTime",
              "canonicalReference": "stentor-models!DateTime:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DateTimeRange",
              "canonicalReference": "stentor-models!DateTimeRange:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "relative",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "parameterName": "now",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "parseRelativeDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!percentComplete:function(1)",
          "docComment": "/**\n * Calculates the percentage complete of the required parameters for the given template.\n *\n * @param template - \n *\n * @param required - \n *\n * @returns {number}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function percentComplete<T>(template: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", required: "
            },
            {
              "kind": "Content",
              "text": "(keyof T)[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PercentComplete",
              "canonicalReference": "stentor-utils!PercentComplete:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "template",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "required",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "percentComplete"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!percentComplete:function(2)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function percentComplete<T>(template: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", required: "
            },
            {
              "kind": "Content",
              "text": "(keyof T)[]"
            },
            {
              "kind": "Content",
              "text": ", returnRemaining: "
            },
            {
              "kind": "Content",
              "text": "true"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "PercentCompleteAndRemaining",
              "canonicalReference": "stentor-utils!PercentCompleteAndRemaining:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "template",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "required",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "returnRemaining",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "percentComplete"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "stentor-utils!PercentComplete:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PercentComplete = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PercentComplete",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "stentor-utils!PercentCompleteAndRemaining:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PercentCompleteAndRemaining<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PercentCompleteAndRemaining",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!PercentCompleteAndRemaining#percentComplete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "percentComplete: "
                },
                {
                  "kind": "Reference",
                  "text": "PercentComplete",
                  "canonicalReference": "stentor-utils!PercentComplete:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "percentComplete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "stentor-utils!PercentCompleteAndRemaining#remaining:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remaining: "
                },
                {
                  "kind": "Content",
                  "text": "(keyof T)[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "remaining",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "stentor-utils!PREPOSITIONS:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "PREPOSITIONS: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            }
          ],
          "releaseTag": "Public",
          "name": "PREPOSITIONS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!pruneEmpty:function(1)",
          "docComment": "/**\n * Prune an object. Removes all empty strings, NaNs, undefineds, and nulls.\n *\n * @param obj - \n *\n * @see\n *\n * Based on https://stackoverflow.com/a/26202058/1349766\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function pruneEmpty<T>(obj: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "pruneEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!random:function(1)",
          "docComment": "/**\n * Returns a random item from the given array.\n *\n * @param items - \n *\n * @returns {T}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function random<T>(items: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "items",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "random"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!randomString:function(1)",
          "docComment": "/**\n * Generates a random string of characters both upper and lowercase with numbers.\n *\n * @param size - Length of the string. Can not be null.\n *\n * @param charset - Optionally a subset of characters to pull from.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function randomString(size: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "size",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "randomString"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!removeEmptyStrings:function(1)",
          "docComment": "/**\n * Creates a copy and removes the empty strings from the object.\n *\n * @param obj - \n *\n * @returns {T}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeEmptyStrings<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(obj: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "removeEmptyStrings"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!removeItems:function(1)",
          "docComment": "/**\n * A function that's the opposite of \"subset\" in which it will remove the attributes that are given in the function.\n *\n * The original object is not affected.\n *\n * @param obj - Object to remove the items from.\n *\n * @param attrs - The attribute keys to remove from the object. It can be strings for generic javascript objects or numbers for arrays. It can also be a function that returns a boolean where \"true\" means to keep and \"false\" means to remove. In the case for functions, the first parameters will be the \"key\" of the object (string for objects and numbers for arrays.).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeItems(obj: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", attrs: "
            },
            {
              "kind": "Content",
              "text": "(string | number)[] | "
            },
            {
              "kind": "Reference",
              "text": "ValidateKeyCallback",
              "canonicalReference": "stentor-utils!ValidateKeyCallback:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "attrs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "removeItems"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!removePostFix:function(1)",
          "docComment": "/**\n * Removes a postfix from a string if it exists. If the postfix does not exist then the string is passed through unedited.\n *\n * For example, when passed \"foo\" and post fix \"_bar\", \"foo\" will be returned. If you pass \"foo_bar\" and \"_bar\" then \"_bar\" will be removed and \"foo\" will be returned.\n *\n * @param original - \n *\n * @param postFix - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removePostFix(original: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", postFix: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "original",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "postFix",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "removePostFix"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!removeTagsWithContent:function(1)",
          "docComment": "/**\n * Removes the provided XML tags from the provided speech.\n *\n * @param speech - A string to have the tags\n *\n * @param tags - The names of the tags such as \"speak\"\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeTagsWithContent(speech: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", tags: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "speech",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "tags",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "removeTagsWithContent"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!requestSlotValueToString:function(1)",
          "docComment": "/**\n * Convert a request slot value to a string, helpful for display or debugging.\n *\n * @param value - Slot value to convert to a string\n *\n * @returns String suitable for console statements or display\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function requestSlotValueToString(value: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotValues",
              "canonicalReference": "stentor-models!RequestSlotValues:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "requestSlotValueToString"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!responsesContain:function(1)",
          "docComment": "/**\n * Does the provided intent or handler have a response that contains the provided character.\n *\n * @param intent - \n *\n * @param character - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function responsesContain(intent: "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Handler",
              "canonicalReference": "stentor-models!Handler:interface"
            },
            {
              "kind": "Content",
              "text": ", character: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "character",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "responsesContain"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!sanitizePhoneNumber:function(1)",
          "docComment": "/**\n * Sanitizes a phone number for text to speech.\n *\n * @param phoneNumber - Phone number to be cleaned for text to speech\n *\n * @returns Cleaned phone number\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function sanitizePhoneNumber(phoneNumber: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "phoneNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "sanitizePhoneNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!shuffle:function(1)",
          "docComment": "/**\n * Shuffles the contents of an array, returning a new array.\n *\n * @param array - \n *\n * @returns {T[]}\n *\n * @see\n *\n * https://bost.ocks.org/mike/shuffle/\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function shuffle<T>(array: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "array",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "shuffle"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!slotValueToSpeech:function(1)",
          "docComment": "/**\n * Based on the provided slot value, it will return the appropriate <say-as> tag.\n *\n * {@link https://cloud.google.com/text-to-speech/docs/ssml#say%E2%80%91as} {@link https://developer.amazon.com/en-US/docs/alexa/custom-skills/speech-synthesis-markup-language-ssml-reference.html#say-as} {@link https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html#say-as-tag}\n *\n * @param value - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function slotValueToSpeech(value: "
            },
            {
              "kind": "Reference",
              "text": "RequestSlotValues",
              "canonicalReference": "stentor-models!RequestSlotValues:type"
            },
            {
              "kind": "Content",
              "text": ", type?: "
            },
            {
              "kind": "Content",
              "text": "\"ssml\" | \"displayText\""
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "slotValueToSpeech"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!ssmlify:function(1)",
          "docComment": "/**\n * Ensures the speech is properly wrapped by <speak> tags. The method is innocuous if they already exist\n *\n * @param str - String to surround with <speak> tags\n *\n * @returns String surrounded by <speak> tags\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ssmlify(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", clean?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "clean",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "ssmlify"
        },
        {
          "kind": "Class",
          "canonicalReference": "stentor-utils!StringExpander:class",
          "docComment": "/**\n * Expands strings when the pattern {option0|option1} is found within the string.\n *\n * If either ${VAR} or the alexa-utterances {-|VAR} is within the string, it preserved and converted to ${} by default.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringExpander "
            }
          ],
          "releaseTag": "Public",
          "name": "StringExpander",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "stentor-utils!StringExpander:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StringExpander` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(props?: "
                },
                {
                  "kind": "Reference",
                  "text": "StringExpanderProps",
                  "canonicalReference": "stentor-utils!StringExpanderProps:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "props",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "stentor-utils!StringExpander#expand:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "expand(str: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "str",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "expand"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "stentor-utils!StringExpanderProps:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringExpanderProps "
            }
          ],
          "releaseTag": "Public",
          "name": "StringExpanderProps",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "stentor-utils!StringExpanderProps#reduceToOneSpace:member",
              "docComment": "/**\n * Reduce multiple spaces to one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reduceToOneSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "reduceToOneSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "stentor-utils!StringExpanderProps#trim:member",
              "docComment": "/**\n * Trim leading and trailing spaces\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "trim?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "trim",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "stentor-utils!StringExpanderProps#variableStyle:member",
              "docComment": "/**\n * Override the default value of ESTemplateLiteral ${VAR}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "variableStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "StringVariableStyle",
                  "canonicalReference": "stentor-utils!StringVariableStyle:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "variableStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "stentor-utils!StringVariableStyle:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StringVariableStyle "
            }
          ],
          "releaseTag": "Public",
          "name": "StringVariableStyle",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!StringVariableStyle.AlexaSlot:member",
              "docComment": "/**\n * Alexa Slot style, {VAR}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AlexaSlot = "
                },
                {
                  "kind": "Content",
                  "text": "\"ALEXA\""
                }
              ],
              "releaseTag": "Public",
              "name": "AlexaSlot",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!StringVariableStyle.AlexaUtterances:member",
              "docComment": "/**\n * Alexa Utterances style, {-|VAR}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AlexaUtterances = "
                },
                {
                  "kind": "Content",
                  "text": "\"AU\""
                }
              ],
              "releaseTag": "Public",
              "name": "AlexaUtterances",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "stentor-utils!StringVariableStyle.ESTemplateLiteral:member",
              "docComment": "/**\n * ES Template Literal style, ${VAR}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ESTemplateLiteral = "
                },
                {
                  "kind": "Content",
                  "text": "\"ES\""
                }
              ],
              "releaseTag": "Public",
              "name": "ESTemplateLiteral",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!subset:function(1)",
          "docComment": "/**\n * A function that will return a subset of a given object keeping only the attributes that it contains.\n *\n * The original object is not affected.\n *\n * @param obj - Object to create a subset for.\n *\n * @param attrs - The attributes to retain in the object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function subset(obj: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", attrs: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "attrs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "subset"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!throwIfContainsExtra:function(1)",
          "docComment": "/**\n * A validation function that can check an object contains properties that should not exist in the object.\n *\n * @param obj - The object to check.\n *\n * @param restrictAttrs - The attributes to restrict to the object to. Will not check if empty.\n *\n * @param undefinedPermitted - Set to true if the object is allowed to be undefined. Default is false in which case an error will be thrown.\n *\n * @param onError - An optional error handler that allows for custom messages or actions. The keys passed in will be the keys that were not allowed in the object but were.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function throwIfContainsExtra(obj: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", restrictAttrs: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", undefinedPermitted?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", onError?: "
            },
            {
              "kind": "Reference",
              "text": "ValidationErrorHandler",
              "canonicalReference": "stentor-utils!ValidationErrorHandler:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "restrictAttrs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "undefinedPermitted",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "onError",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "throwIfContainsExtra"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!throwIfDoesContain:function(1)",
          "docComment": "/**\n * A validation function that can check if an object contains an attribute that is should not have.\n *\n * @param obj - The object to check.\n *\n * @param requiredAttrs - The attributes that are not allowed.\n *\n * @param onError - An optional error handler that allows for custom messages or actions. The keys passed in will be the keys that are banned which are contained in the item.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function throwIfDoesContain(obj: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", bannedAttrs: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", onError?: "
            },
            {
              "kind": "Reference",
              "text": "ValidationErrorHandler",
              "canonicalReference": "stentor-utils!ValidationErrorHandler:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "bannedAttrs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "onError",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "throwIfDoesContain"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!throwIfDoesNotContain:function(1)",
          "docComment": "/**\n * A validation function that can check if an object contains the required attributes and throws an error if they are not part of it.\n *\n * @param obj - Object to check\n *\n * @param requiredAttrs - The attributes in the object that are required.\n *\n * @param undefinedPermitted - True if the object is allowed to be undefined. Default is false in which case an error will be thrown.\n *\n * @param onError - An optional error handler that allows for custom messages or actions. The keys passed in will be the keys that were required but are not inside the object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function throwIfDoesNotContain(obj: "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", requiredAttrs: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", undefinedPermitted?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", onError?: "
            },
            {
              "kind": "Reference",
              "text": "ValidationErrorHandler",
              "canonicalReference": "stentor-utils!ValidationErrorHandler:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "requiredAttrs",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "undefinedPermitted",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "onError",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "throwIfDoesNotContain"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!toMap:function(1)",
          "docComment": "/**\n * Quickly turn an array of Intents and Handlers to a map with the intentIds as the keys.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toMap<T extends "
            },
            {
              "kind": "Reference",
              "text": "Intent",
              "canonicalReference": "stentor-models!Intent:interface"
            },
            {
              "kind": "Content",
              "text": ">(intents: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    [id: string]: T;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "intents",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "toMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!toNumber:function(1)",
          "docComment": "/**\n * Converts the string to a number, if applicable.\n *\n * @param number - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toNumber(stringOrNumber: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stringOrNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "toNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!toNumberIfPossible:function(1)",
          "docComment": "/**\n * Converts to a number if possible otherwise it passes it through.\n *\n * This preserves Dates and booleans. If true is passed in, true is passed out. Additionally, if an empty string is passed, it passes it through instead of turning it into a number.\n *\n * @param potentialNumber - \n *\n * @returns {(T | number)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toNumberIfPossible<T>(potentialNumber: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "potentialNumber",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "toNumberIfPossible"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!toResponseOutput:function(1)",
          "docComment": "/**\n * Ensures that an outputSpeech or reprompt, either string or ResponseOutput, is a ResponseOutput.\n *\n * @param input - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toResponseOutput(input: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "ResponseOutput",
              "canonicalReference": "stentor-models!ResponseOutput:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "toResponseOutput"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!toWords:function(1)",
          "docComment": "/**\n * From the provided sentence you return just the words in an array.\n *\n * All commas and other punctuation marks will be removed.\n *\n * @param sentence - \n *\n * @returns {string[]}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toWords(sentence: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sentence",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "toWords"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!trim:function(1)",
          "docComment": "/**\n * Trims all the strings in a string array.\n *\n * @param strings - The strings to trim.\n *\n * @param filter - An optional filter to prevent strings strings from being added.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function trim(strings: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ", filter?: "
            },
            {
              "kind": "Content",
              "text": "(trimmedString: string) => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "strings",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "filter",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "trim"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!truncate:function(1)",
          "docComment": "/**\n * A sentence aware string truncation.\n *\n * @param text - \n *\n * @param maxLength - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function truncate(text: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", maxLength: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "text",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "maxLength",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "truncate"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!uniq:function(1)",
          "docComment": "/**\n * Removes any duplicates from an array.\n *\n * This is a wrapper around lodash.uniq\n *\n * @param input - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uniq<T>(input: "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "T[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "uniq"
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!uuid:function(1)",
          "docComment": "/**\n * Generate a quick, but not perfect, UUID\n *\n * @remarks\n *\n * This method optimizes quickness as opposed to absolute collisionless UUIDs\n *\n * @returns UUID string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function uuid(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "uuid"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "stentor-utils!ValidateKeyCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ValidateKeyCallback = "
            },
            {
              "kind": "Content",
              "text": "(key: string | number, value: any) => boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValidateKeyCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "stentor-utils!ValidationErrorHandler:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ValidationErrorHandler = "
            },
            {
              "kind": "Content",
              "text": "(keys: string[], error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ValidationErrorHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "stentor-utils!wordToNumber:function(1)",
          "docComment": "/**\n * Converts a word like \"one hundred\" to the number 100.\n *\n * Words that are not numbers are passed through.\n *\n * @param word - Word to convert to a number\n *\n * @returns Returns either the original value or the number that was converted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function wordToNumber(word: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "word",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "wordToNumber"
        }
      ]
    }
  ]
}
