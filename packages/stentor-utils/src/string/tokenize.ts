/*! Copyright (c) 2025, XAPP AI */

export interface TokenizeOptions {
  /**
   * If true, removes common stop words from the tokenized output.
   * Default is false.
   */
  removeStopWords?: boolean;
}

// Based on the SPACY & NLTK common stop words list.
export const DEFAULT_STOP_WORDS: Set<string> = new Set([
  "call",
  "upon",
  "still",
  "nevertheless",
  "down",
  "every",
  "forty",
  "‘re",
  "always",
  "whole",
  "side",
  "n't",
  "now",
  "however",
  "an",
  "show",
  "least",
  "give",
  "below",
  "did",
  "sometimes",
  "which",
  "'s",
  "nowhere",
  "per",
  "hereupon",
  "yours",
  "she",
  "moreover",
  "eight",
  "somewhere",
  "within",
  "whereby",
  "few",
  "has",
  "so",
  "have",
  "for",
  "noone",
  "top",
  "were",
  "those",
  "thence",
  "eleven",
  "after",
  "no",
  "’ll",
  "others",
  "ourselves",
  "themselves",
  "though",
  "that",
  "nor",
  "just",
  "’s",
  "before",
  "had",
  "toward",
  "another",
  "should",
  "herself",
  "and",
  "these",
  "such",
  "elsewhere",
  "further",
  "next",
  "indeed",
  "bottom",
  "anyone",
  "his",
  "each",
  "then",
  "both",
  "became",
  "third",
  "whom",
  "‘ve",
  "mine",
  "take",
  "many",
  "anywhere",
  "to",
  "well",
  "thereafter",
  "besides",
  "almost",
  "front",
  "fifteen",
  "towards",
  "none",
  "be",
  "herein",
  "two",
  "using",
  "whatever",
  "please",
  "perhaps",
  "full",
  "ca",
  "we",
  "latterly",
  "here",
  "therefore",
  "us",
  "how",
  "was",
  "made",
  "the",
  "or",
  "may",
  "’re",
  "namely",
  "'ve",
  "anyway",
  "amongst",
  "used",
  "ever",
  "of",
  "there",
  "than",
  "why",
  "really",
  "whither",
  "in",
  "only",
  "wherein",
  "last",
  "under",
  "own",
  "therein",
  "go",
  "seems",
  "‘m",
  "wherever",
  "either",
  "someone",
  "up",
  "doing",
  "on",
  "rather",
  "ours",
  "again",
  "same",
  "over",
  "‘s",
  "latter",
  "during",
  "done",
  "'re",
  "put",
  "'m",
  "much",
  "neither",
  "among",
  "seemed",
  "into",
  "once",
  "my",
  "otherwise",
  "part",
  "everywhere",
  "never",
  "myself",
  "must",
  "will",
  "am",
  "can",
  "else",
  "although",
  "as",
  "beyond",
  "are",
  "too",
  "becomes",
  "does",
  "a",
  "everyone",
  "but",
  "some",
  "regarding",
  "‘ll",
  "against",
  "throughout",
  "yourselves",
  "him",
  "'d",
  "it",
  "himself",
  "whether",
  "move",
  "’m",
  "hereafter",
  "re",
  "while",
  "whoever",
  "your",
  "first",
  "amount",
  "twelve",
  "serious",
  "other",
  "any",
  "off",
  "seeming",
  "four",
  "itself",
  "nothing",
  "beforehand",
  "make",
  "out",
  "very",
  "already",
  "various",
  "until",
  "hers",
  "they",
  "not",
  "them",
  "where",
  "would",
  "since",
  "everything",
  "at",
  "together",
  "yet",
  "more",
  "six",
  "back",
  "with",
  "thereupon",
  "becoming",
  "around",
  "due",
  "keep",
  "somehow",
  "n‘t",
  "across",
  "all",
  "when",
  "i",
  "empty",
  "nine",
  "five",
  "get",
  "see",
  "been",
  "name",
  "between",
  "hence",
  "ten",
  "several",
  "from",
  "whereupon",
  "through",
  "hereby",
  "'ll",
  "alone",
  "something",
  "formerly",
  "without",
  "above",
  "onto",
  "except",
  "enough",
  "become",
  "behind",
  "’d",
  "its",
  "most",
  "n’t",
  "might",
  "whereas",
  "anything",
  "if",
  "her",
  "via",
  "fifty",
  "is",
  "thereby",
  "twenty",
  "often",
  "whereafter",
  "their",
  "also",
  "anyhow",
  "cannot",
  "our",
  "could",
  "because",
  "who",
  "beside",
  "by",
  "whence",
  "being",
  "meanwhile",
  "this",
  "afterwards",
  "whenever",
  "mostly",
  "what",
  "one",
  "nobody",
  "seem",
  "less",
  "do",
  "‘d",
  "say",
  "thus",
  "unless",
  "along",
  "yourself",
  "former",
  "thru",
  "he",
  "hundred",
  "three",
  "sixty",
  "me",
  "sometime",
  "whose",
  "you",
  "quite",
  "’ve",
  "about",
  "even",

  // NLTK stop words (already normalized)
  "ve",
  "am",
  "can",
  "shouldn",
  "down",
  "from",
  "wouldn't",
  "as",
  "be",
  "are",
  "too",
  "through",
  "don't",
  "does",
  "a",
  "but",
  "now",
  "some",
  "an",
  "couldn't",
  "we",
  "below",
  "against",
  "here",
  "won",
  "did",
  "yourselves",
  "was",
  "how",
  "above",
  "him",
  "shan",
  "it",
  "which",
  "weren't",
  "himself",
  "its",
  "most",
  "the",
  "wouldn",
  "needn",
  "re",
  "or",
  "while",
  "mustn't",
  "your",
  "if",
  "hasn't",
  "shouldn't",
  "yours",
  "she",
  "her",
  "wasn",
  "other",
  "aren",
  "any",
  "ll",
  "off",
  "couldn",
  "ain",
  "wasn't",
  "few",
  "is",
  "of",
  "there",
  "isn't",
  "than",
  "shan't",
  "why",
  "has",
  "so",
  "in",
  "didn't",
  "only",
  "have",
  "itself",
  "for",
  "under",
  "own",
  "hasn",
  "were",
  "doesn't",
  "needn't",
  "those",
  "isn",
  "out",
  "very",
  "won't",
  "until",
  "hers",
  "after",
  "it's",
  "up",
  "they",
  "their",
  "not",
  "doing",
  "no",
  "them",
  "where",
  "ourselves",
  "themselves",
  "aren't",
  "our",
  "on",
  "that",
  "theirs",
  "nor",
  "t",
  "ours",
  "at",
  "s",
  "again",
  "same",
  "over",
  "just",
  "ma",
  "because",
  "who",
  "mightn",
  "you've",
  "before",
  "by",
  "more",
  "should've",
  "being",
  "had",
  "weren",
  "this",
  "mightn't",
  "m",
  "with",
  "should",
  "haven't",
  "hadn't",
  "what",
  "that'll",
  "you're",
  "during",
  "haven",
  "herself",
  "and",
  "these",
  "such",
  "further",
  "mustn",
  "do",
  "you'd",
  "having",
  "didn",
  "d",
  "hadn",
  "y",
  "yourself",
  "his",
  "into",
  "once",
  "each",
  "don",
  "all",
  "then",
  "both",
  "when",
  "he",
  "will",
  "me",
  "whom",
  "i",
  "my",
  "you",
  "to",
  "between",
  "myself",
  "doesn",
  "about",
  "been",
  "o",
  "you'll",
  "she's",
  "mr",
  "ms",
  "mrs",
  "dr",
  "prof",
  "jr",
  "sr",
  
  // Common contractions with apostrophes (in case they're preserved)
  "i'm",
  "i've",
  "i'll",
  "i'd",
  "you're",
  "you've", 
  "you'll",
  "you'd",
  "he's",
  "he'll",
  "he'd",
  "she's",
  "she'll",
  "she'd",
  "it's",
  "it'll",
  "we're",
  "we've",
  "we'll",
  "we'd",
  "they're",
  "they've",
  "they'll",
  "they'd",
  "that's",
  "that'll",
  "that'd",
  "what's",
  "what'll",
  "who's",
  "who'll",
  "who'd",
  "where's",
  "when's",
  "why's",
  "how's",
]);

/**
 * Tokenizes a message into an array of words, optionally removing stop words.
 *
 * Will lowercase the message, trim whitespace, and remove common punctuation.
 * Normalizes fancy Mac OS/iOS quotes and apostrophes to standard ASCII equivalents.
 *
 * @param {string} [message] - The message to tokenize.
 * @param {TokenizeOptions} [options] - Options for tokenization.
 * @returns {string[]} An array of tokens (words).
 */
export function tokenize(message?: string, options: TokenizeOptions = {}): string[] {
  if (!message) return [];

  let trimmed = message.trim().toLowerCase();

  // Normalize fancy Mac OS/iOS style quotes and apostrophes to standard ASCII
  trimmed = trimmed
    .replace(/[\u2018\u2019]/g, "'") // ' ' → '
    .replace(/[\u201C\u201D]/g, '"') // " " → "
    .replace(/\u0060/g, "'")         // ` → '
    .replace(/\u00B4/g, "'");        // ´ → '

  // split on whitespace first
  let tokens = trimmed.split(/\s+/).filter((t) => t.length > 0);

  // remove punctuation from each token's edges while preserving apostrophes within words
  tokens = tokens.map(token => {
    // Remove leading and trailing punctuation, but keep apostrophes within the word
    // Also remove standalone ampersands
    // Include normalized quotes and fancy quotes in the punctuation removal pattern
    return token.replace(/^[.,!?;:()[\]{}"'\u201C\u201D\u2018\u2019&]+/, "").replace(/[.,!?;:()[\]{}"'\u201C\u201D\u2018\u2019&]+$/, "");
  }).filter((t) => t.length > 0 && t !== "&");

  // optionally remove stop words
  if (options.removeStopWords) {
    tokens = tokens.filter((t) => !DEFAULT_STOP_WORDS.has(t));
  }

  return tokens;
}
